// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: iotdepinprotocol/iotdepinprotocol/event_pb.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventPb struct {
	Index      string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	DeviceName string `protobuf:"bytes,2,opt,name=deviceName,proto3" json:"deviceName,omitempty"`
	Payload    string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Creator    string `protobuf:"bytes,4,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt  string `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt  string `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
}

func (m *EventPb) Reset()         { *m = EventPb{} }
func (m *EventPb) String() string { return proto.CompactTextString(m) }
func (*EventPb) ProtoMessage()    {}
func (*EventPb) Descriptor() ([]byte, []int) {
	return fileDescriptor_4e5711a30d9e13a8, []int{0}
}
func (m *EventPb) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventPb) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventPb.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventPb) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventPb.Merge(m, src)
}
func (m *EventPb) XXX_Size() int {
	return m.Size()
}
func (m *EventPb) XXX_DiscardUnknown() {
	xxx_messageInfo_EventPb.DiscardUnknown(m)
}

var xxx_messageInfo_EventPb proto.InternalMessageInfo

func (m *EventPb) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *EventPb) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *EventPb) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func (m *EventPb) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *EventPb) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func (m *EventPb) GetUpdatedAt() string {
	if m != nil {
		return m.UpdatedAt
	}
	return ""
}

func init() {
	proto.RegisterType((*EventPb)(nil), "stccommunity.iotdepinprotocol.iotdepinprotocol.EventPb")
}

func init() {
	proto.RegisterFile("iotdepinprotocol/iotdepinprotocol/event_pb.proto", fileDescriptor_4e5711a30d9e13a8)
}

var fileDescriptor_4e5711a30d9e13a8 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4a, 0xc4, 0x30,
	0x18, 0xc7, 0x1b, 0xf5, 0xee, 0xb8, 0x8c, 0xc1, 0x21, 0x83, 0x04, 0x71, 0x72, 0x69, 0x4f, 0xf0,
	0x09, 0x14, 0x5d, 0x45, 0x1c, 0x1d, 0x94, 0x36, 0xf9, 0xd0, 0xc0, 0x35, 0x5f, 0x68, 0xbf, 0x1e,
	0xd7, 0xb7, 0xf0, 0x4d, 0x7c, 0x0d, 0xc7, 0x1b, 0x1d, 0xa5, 0x7d, 0x11, 0x49, 0x7a, 0x56, 0xb1,
	0x5b, 0xfe, 0xbf, 0x5f, 0x08, 0xe4, 0xc7, 0x2f, 0x2c, 0x92, 0x01, 0x6f, 0x9d, 0xaf, 0x90, 0x50,
	0xe3, 0x7a, 0x35, 0x01, 0xb0, 0x01, 0x47, 0xcf, 0xbe, 0xc8, 0x22, 0x11, 0x59, 0x4d, 0x5a, 0x63,
	0x59, 0x36, 0xce, 0x52, 0x9b, 0xfd, 0xbf, 0x3d, 0x01, 0x67, 0xef, 0x8c, 0x2f, 0x6e, 0xc3, 0x13,
	0xf7, 0x85, 0x38, 0xe6, 0x33, 0xeb, 0x0c, 0x6c, 0x25, 0x3b, 0x65, 0xe7, 0xcb, 0x87, 0x61, 0x08,
	0xc5, 0xb9, 0x81, 0x8d, 0xd5, 0x70, 0x97, 0x97, 0x20, 0x0f, 0xa2, 0xfa, 0x43, 0x84, 0xe4, 0x0b,
	0x9f, 0xb7, 0x6b, 0xcc, 0x8d, 0x3c, 0x8c, 0xf2, 0x67, 0x06, 0xa3, 0x2b, 0xc8, 0x09, 0x2b, 0x79,
	0x34, 0x98, 0xfd, 0x14, 0x27, 0x7c, 0x19, 0x8f, 0x60, 0xae, 0x48, 0xce, 0xa2, 0xfb, 0x05, 0xc1,
	0x36, 0xde, 0xec, 0xed, 0x7c, 0xb0, 0x23, 0xb8, 0x7e, 0xfa, 0xe8, 0x14, 0xdb, 0x75, 0x8a, 0x7d,
	0x75, 0x8a, 0xbd, 0xf5, 0x2a, 0xd9, 0xf5, 0x2a, 0xf9, 0xec, 0x55, 0xf2, 0x78, 0xf3, 0x62, 0xe9,
	0xb5, 0x29, 0x32, 0x8d, 0xe5, 0xaa, 0x26, 0x9d, 0x8e, 0x1d, 0x42, 0xb5, 0x34, 0xfe, 0x3b, 0x1d,
	0xbb, 0x6d, 0xa7, 0x29, 0xa9, 0xf5, 0x50, 0x17, 0xf3, 0xb8, 0x2f, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x36, 0x5e, 0x20, 0xbf, 0x7c, 0x01, 0x00, 0x00,
}

func (m *EventPb) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventPb) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventPb) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UpdatedAt) > 0 {
		i -= len(m.UpdatedAt)
		copy(dAtA[i:], m.UpdatedAt)
		i = encodeVarintEventPb(dAtA, i, uint64(len(m.UpdatedAt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintEventPb(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEventPb(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintEventPb(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DeviceName) > 0 {
		i -= len(m.DeviceName)
		copy(dAtA[i:], m.DeviceName)
		i = encodeVarintEventPb(dAtA, i, uint64(len(m.DeviceName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintEventPb(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEventPb(dAtA []byte, offset int, v uint64) int {
	offset -= sovEventPb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventPb) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovEventPb(uint64(l))
	}
	l = len(m.DeviceName)
	if l > 0 {
		n += 1 + l + sovEventPb(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovEventPb(uint64(l))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEventPb(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovEventPb(uint64(l))
	}
	l = len(m.UpdatedAt)
	if l > 0 {
		n += 1 + l + sovEventPb(uint64(l))
	}
	return n
}

func sovEventPb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEventPb(x uint64) (n int) {
	return sovEventPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventPb) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEventPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventPb: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventPb: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEventPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEventPb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEventPb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpdatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEventPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEventPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEventPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEventPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEventPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEventPb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEventPb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEventPb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEventPb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEventPb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEventPb = fmt.Errorf("proto: unexpected end of group")
)
